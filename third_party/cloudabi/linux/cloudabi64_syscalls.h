// Copyright (c) 2016-2019 Nuxi (https://nuxi.nl/) and contributors.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// This file is automatically generated. Do not edit.
//
// Source: https://github.com/NuxiNL/cloudabi

#ifndef CLOUDABI64_SYSCALLS_H
#define CLOUDABI64_SYSCALLS_H

#include "cloudabi64_types.h"

#ifdef __cplusplus
extern "C" {
#endif

cloudabi_errno_t cloudabi64_sys_fd_pread(cloudabi_fd_t fd,
                                         const cloudabi64_iovec_t __user *iovs,
                                         size_t iovs_len,
                                         cloudabi_filesize_t offset,
                                         size_t *nread);

cloudabi_errno_t cloudabi64_sys_fd_pwrite(
    cloudabi_fd_t fd, const cloudabi64_ciovec_t __user *iovs, size_t iovs_len,
    cloudabi_filesize_t offset, size_t *nwritten);

cloudabi_errno_t cloudabi64_sys_fd_read(cloudabi_fd_t fd,
                                        const cloudabi64_iovec_t __user *iovs,
                                        size_t iovs_len, size_t *nread);

cloudabi_errno_t cloudabi64_sys_fd_write(cloudabi_fd_t fd,
                                         const cloudabi64_ciovec_t __user *iovs,
                                         size_t iovs_len, size_t *nwritten);

cloudabi_errno_t cloudabi64_sys_poll(const cloudabi64_subscription_t __user *in,
                                     cloudabi_event_t __user *out,
                                     size_t nsubscriptions, size_t *nevents);

cloudabi_errno_t cloudabi64_sys_sock_recv(cloudabi_fd_t sock,
                                          const cloudabi64_recv_in_t __user *in,
                                          cloudabi64_recv_out_t __user *out);

cloudabi_errno_t cloudabi64_sys_sock_send(cloudabi_fd_t sock,
                                          const cloudabi64_send_in_t __user *in,
                                          cloudabi64_send_out_t __user *out);

cloudabi_errno_t cloudabi64_sys_thread_create(
    cloudabi64_threadattr_t __user *attr, cloudabi_tid_t *tid);

#ifdef __cplusplus
}  // extern "C"
#endif

#endif
