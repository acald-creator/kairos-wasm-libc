// Copyright (c) 2015 Nuxi, https://nuxi.nl/
//
// SPDX-License-Identifier: BSD-2-Clause

#include <math.h>

#include "gtest/gtest.h"

TEST(math, presence) {
  // Test whether all functions in <math.h> are present.
  ASSERT_EQ(0.0, acos(1.0));
  ASSERT_EQ(0.0f, acosf(1.0f));
  ASSERT_TRUE(isnan(acosh(0.0)));
  ASSERT_TRUE(isnan(acoshf(0.0f)));
  ASSERT_TRUE(isnan(acoshl(0.0L)));
  ASSERT_EQ(0.0L, acosl(1.0L));
  ASSERT_EQ(0.0, asin(0.0));
  ASSERT_EQ(0.0f, asinf(0.0f));
  ASSERT_EQ(0.0, asinh(0.0));
  ASSERT_EQ(0.0f, asinhf(0.0f));
  ASSERT_EQ(0.0L, asinhl(0.0L));
  ASSERT_EQ(0.0L, asinl(0.0L));
  ASSERT_EQ(0.0, atan(0.0));
  ASSERT_EQ(0.0, atan2(0.0, 0.0));
  ASSERT_EQ(0.0f, atan2f(0.0f, 0.0f));
  ASSERT_EQ(0.0L, atan2l(0.0L, 0.0L));
  ASSERT_EQ(0.0f, atanf(0.0f));
  ASSERT_EQ(0.0, atanh(0.0));
  ASSERT_EQ(0.0f, atanhf(0.0f));
  ASSERT_EQ(0.0L, atanhl(0.0L));
  ASSERT_EQ(0.0L, atanl(0.0L));
  ASSERT_EQ(0.0, cbrt(0.0));
  ASSERT_EQ(0.0f, cbrtf(0.0f));
  ASSERT_EQ(0.0L, cbrtl(0.0L));
  ASSERT_EQ(0.0, ceil(0.0));
  ASSERT_EQ(0.0f, ceilf(0.0f));
  ASSERT_EQ(0.0L, ceill(0.0L));
  ASSERT_EQ(0.0, copysign(0.0, 0.0));
  ASSERT_EQ(0.0f, copysignf(0.0f, 0.0f));
  ASSERT_EQ(0.0L, copysignl(0.0L, 0.0L));
  ASSERT_EQ(1.0, cos(0.0));
  ASSERT_EQ(1.0f, cosf(0.0f));
  ASSERT_EQ(1.0, cosh(0.0));
  ASSERT_EQ(1.0f, coshf(0.0f));
  ASSERT_EQ(1.0L, coshl(0.0L));
  ASSERT_EQ(1.0L, cosl(0.0L));
  ASSERT_EQ(0.0, erf(0.0));
  ASSERT_EQ(1.0, erfc(0.0));
  ASSERT_EQ(1.0f, erfcf(0.0f));
  ASSERT_EQ(1.0L, erfcl(0.0L));
  ASSERT_EQ(0.0f, erff(0.0f));
  ASSERT_EQ(0.0L, erfl(0.0L));
  ASSERT_EQ(1.0, exp(0.0));
  ASSERT_EQ(1.0, exp2(0.0));
  ASSERT_EQ(1.0f, exp2f(0.0f));
  ASSERT_EQ(1.0L, exp2l(0.0L));
  ASSERT_EQ(1.0f, expf(0.0f));
  ASSERT_EQ(1.0L, expl(0.0L));
  ASSERT_EQ(0.0, expm1(0.0));
  ASSERT_EQ(0.0f, expm1f(0.0f));
  ASSERT_EQ(0.0L, expm1l(0.0L));
  ASSERT_EQ(0.0, fabs(0.0));
  ASSERT_EQ(0.0f, fabsf(0.0f));
  ASSERT_EQ(0.0L, fabsl(0.0L));
  ASSERT_EQ(0.0, fdim(0.0, 0.0));
  ASSERT_EQ(0.0f, fdimf(0.0f, 0.0f));
  ASSERT_EQ(0.0L, fdiml(0.0L, 0.0L));
  ASSERT_EQ(0.0, floor(0.0));
  ASSERT_EQ(0.0f, floorf(0.0f));
  ASSERT_EQ(0.0L, floorl(0.0L));
  ASSERT_EQ(0.0, fma(0.0, 0.0, 0.0));
  ASSERT_EQ(0.0f, fmaf(0.0f, 0.0f, 0.0f));
  ASSERT_EQ(0.0L, fmal(0.0L, 0.0L, 0.0L));
  ASSERT_EQ(0.0, fmax(0.0, 0.0));
  ASSERT_EQ(0.0f, fmaxf(0.0f, 0.0f));
  ASSERT_EQ(0.0L, fmaxl(0.0L, 0.0L));
  ASSERT_EQ(0.0, fmin(0.0, 0.0));
  ASSERT_EQ(0.0f, fminf(0.0f, 0.0f));
  ASSERT_EQ(0.0L, fminl(0.0L, 0.0L));
  ASSERT_TRUE(isnan(fmod(0.0, 0.0)));
  ASSERT_TRUE(isnan(fmodf(0.0f, 0.0f)));
  ASSERT_TRUE(isnan(fmodl(0.0L, 0.0L)));
  int expval;
  ASSERT_EQ(0.0, frexp(0.0, &expval));
  ASSERT_EQ(0, expval);
  ASSERT_EQ(0.0f, frexpf(0.0f, &expval));
  ASSERT_EQ(0, expval);
  ASSERT_EQ(0.0L, frexpl(0.0L, &expval));
  ASSERT_EQ(0, expval);
  ASSERT_EQ(0.0, hypot(0.0, 0.0));
  ASSERT_EQ(0.0f, hypotf(0.0f, 0.0f));
  ASSERT_EQ(0.0L, hypotl(0.0L, 0.0L));
  ASSERT_EQ(FP_ILOGB0, ilogb(0.0));
  ASSERT_EQ(FP_ILOGB0, ilogbf(0.0f));
  ASSERT_EQ(FP_ILOGB0, ilogbl(0.0L));
  ASSERT_EQ(1.0, j0(0.0));
  ASSERT_EQ(0.0, j1(0.0));
  ASSERT_EQ(1.0, jn(0, 0.0));
  ASSERT_EQ(0.0, ldexp(0.0, 0));
  ASSERT_EQ(0.0f, ldexpf(0.0f, 0));
  ASSERT_EQ(0.0L, ldexpl(0.0L, 0));
  ASSERT_TRUE(isinf(lgamma(0.0)));
  ASSERT_TRUE(isinf(lgammaf(0.0f)));
  ASSERT_TRUE(isinf(lgammal(0.0L)));
  int signgam;
  ASSERT_TRUE(isinf(lgamma_r(0.0, &signgam)));
  ASSERT_EQ(1, signgam);
  ASSERT_TRUE(isinf(lgammaf_r(0.0f, &signgam)));
  ASSERT_EQ(1, signgam);
  ASSERT_TRUE(isinf(lgammal_r(0.0L, &signgam)));
  ASSERT_EQ(1, signgam);
  ASSERT_EQ(0LL, llrint(0.0));
  ASSERT_EQ(0LL, llrintf(0.0f));
  ASSERT_EQ(0LL, llrintl(0.0L));
  ASSERT_EQ(0LL, llround(0.0));
  ASSERT_EQ(0LL, llroundf(0.0f));
  ASSERT_EQ(0LL, llroundl(0.0L));
  ASSERT_TRUE(isinf(log(0.0)));
  ASSERT_TRUE(isinf(log10(0.0)));
  ASSERT_TRUE(isinf(log10f(0.0f)));
  ASSERT_TRUE(isinf(log10l(0.0L)));
  ASSERT_EQ(0.0, log1p(0.0));
  ASSERT_EQ(0.0f, log1pf(0.0f));
  ASSERT_EQ(0.0L, log1pl(0.0L));
  ASSERT_TRUE(isinf(log2(0.0)));
  ASSERT_TRUE(isinf(log2f(0.0f)));
  ASSERT_TRUE(isinf(log2l(0.0L)));
  ASSERT_TRUE(isinf(logb(0.0)));
  ASSERT_TRUE(isinf(logbf(0.0f)));
  ASSERT_TRUE(isinf(logbl(0.0L)));
  ASSERT_TRUE(isinf(logf(0.0f)));
  ASSERT_TRUE(isinf(logl(0.0L)));
  ASSERT_EQ(0L, lrint(0.0));
  ASSERT_EQ(0L, lrintf(0.0f));
  ASSERT_EQ(0L, lrintl(0.0L));
  ASSERT_EQ(0L, lround(0.0));
  ASSERT_EQ(0L, lroundf(0.0f));
  ASSERT_EQ(0L, lroundl(0.0L));
  double ival;
  ASSERT_EQ(0.0, modf(0.0, &ival));
  ASSERT_EQ(0.0, ival);
  float ivalf;
  ASSERT_EQ(0.0f, modff(0.0f, &ivalf));
  ASSERT_EQ(0.0f, ivalf);
  long double ivall;
  ASSERT_EQ(0.0L, modfl(0.0L, &ivall));
  ASSERT_EQ(0.0L, ivall);
  ASSERT_TRUE(isnan(nan("")));
  ASSERT_TRUE(isnan(nanf("")));
  ASSERT_TRUE(isnan(nanl("")));
  ASSERT_EQ(0.0, nearbyint(0.0));
  ASSERT_EQ(0.0f, nearbyintf(0.0f));
  ASSERT_EQ(0.0L, nearbyintl(0.0L));
  ASSERT_EQ(0.0, nextafter(0.0, 0.0));
  ASSERT_EQ(0.0f, nextafterf(0.0f, 0.0f));
  ASSERT_EQ(0.0L, nextafterl(0.0L, 0.0L));
  ASSERT_EQ(0.0, nexttoward(0.0, 0.0L));
  ASSERT_EQ(0.0f, nexttowardf(0.0f, 0.0L));
  ASSERT_EQ(0.0L, nexttowardl(0.0L, 0.0L));
  ASSERT_EQ(1.0, pow(0.0, 0.0));
  ASSERT_EQ(1.0f, powf(0.0f, 0.0f));
  ASSERT_EQ(1.0L, powl(0.0L, 0.0L));
  ASSERT_TRUE(isnan(remainder(0.0, 0.0)));
  ASSERT_TRUE(isnan(remainderf(0.0f, 0.0f)));
  ASSERT_TRUE(isnan(remainderl(0.0L, 0.0L)));
  int quo;
  ASSERT_EQ(0.0, remquo(0.0, 1.0, &quo));
  ASSERT_EQ(0, quo);
  ASSERT_EQ(0.0f, remquof(0.0f, 1.0f, &quo));
  ASSERT_EQ(0, quo);
  ASSERT_EQ(0.0L, remquol(0.0L, 1.0L, &quo));
  ASSERT_EQ(0, quo);
  ASSERT_EQ(0.0, rint(0.0));
  ASSERT_EQ(0.0f, rintf(0.0f));
  ASSERT_EQ(0.0L, rintl(0.0L));
  ASSERT_EQ(0.0, round(0.0));
  ASSERT_EQ(0.0f, roundf(0.0f));
  ASSERT_EQ(0.0L, roundl(0.0L));
  ASSERT_EQ(0.0, scalbln(0.0, 0L));
  ASSERT_EQ(0.0f, scalblnf(0.0f, 0L));
  ASSERT_EQ(0.0L, scalblnl(0.0L, 0L));
  ASSERT_EQ(0.0, scalbn(0.0, 0));
  ASSERT_EQ(0.0f, scalbnf(0.0f, 0));
  ASSERT_EQ(0.0L, scalbnl(0.0L, 0));
  ASSERT_EQ(0.0, sin(0.0));
  ASSERT_EQ(0.0f, sinf(0.0f));
  ASSERT_EQ(0.0, sinh(0.0));
  ASSERT_EQ(0.0f, sinhf(0.0f));
  ASSERT_EQ(0.0L, sinhl(0.0L));
  ASSERT_EQ(0.0L, sinl(0.0L));
  ASSERT_EQ(0.0, sqrt(0.0));
  ASSERT_EQ(0.0f, sqrtf(0.0f));
  ASSERT_EQ(0.0L, sqrtl(0.0L));
  ASSERT_EQ(0.0, tan(0.0));
  ASSERT_EQ(0.0f, tanf(0.0f));
  ASSERT_EQ(0.0, tanh(0.0));
  ASSERT_EQ(0.0f, tanhf(0.0f));
  ASSERT_EQ(0.0L, tanhl(0.0L));
  ASSERT_EQ(0.0L, tanl(0.0L));
  ASSERT_TRUE(isinf(tgamma(0.0)));
  ASSERT_TRUE(isinf(tgammaf(0.0f)));
  ASSERT_TRUE(isinf(tgammal(0.0L)));
  ASSERT_EQ(0.0, trunc(0.0));
  ASSERT_EQ(0.0f, truncf(0.0f));
  ASSERT_EQ(0.0L, truncl(0.0L));
  ASSERT_TRUE(isinf(y0(0.0)));
  ASSERT_TRUE(isinf(y1(0.0)));
  ASSERT_TRUE(isinf(yn(0, 0.0)));
}
